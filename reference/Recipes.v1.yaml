openapi: 3.0.0
info:
  title: Recipes
  version: '1.0'
  description: >-
    <span style="font-size: 3em; color: #5D535E;">
      <i class="fas fa-robot fa-2x"></i> <i>CloudHome
    </i></span> 

    </br>

    </br>


    Interact with the `'Recipes'` API to get a list of recipes, add
    or remove recipes, and to update existing recipes.


    Use this API to leverage Rosa's central repository of recipes that
    allow's users to make menus and grocery lists.



    ```bash

    curl --request GET \
      --url 'https://rosa.philliplehner.com/api/recipes/abc?spaceid=all&sort=desc&limit=10' \
      --header 'apikey: 123' \
      --header 'deviceid: all'
    ```


  contact:
    name: Phillip Lehner
    email: pl@philliplehner.com
    url: philliplehner.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
servers:
  - url: 'https://rosa.philliplehner.com/v1'
paths:
  '/recipes/{recipeID}':
    parameters:
      - schema:
          type: integer
        name: recipeID
        in: path
        required: true
        description: Id of an existing recipe.
    get:
      summary: Get Recipe Info by Recipe ID
      tags: []
      responses:
        '200':
          description: Recipe Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
              examples:
                Get Recipe Biscuits:
                  value:
                    id: 142
                    title: Biscuits
                    servings: 12
        '404':
          description: Recipe Not Found
      operationId: get-recipes-recipeId
      description: Retrieve the information of the recipe with the matching recipe ID.
    patch:
      summary: Update Recipe Information
      operationId: patch-recipes-recipeId
      responses:
        '200':
          description: Recipe Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
              examples:
                Updated Recipe Biscuits:
                  value:
                    id: 142
                    Title: Buttermilk Biscuits
                    servings: 13
        '404':
          description: Recipe Not Found
        '409':
          description: Title Already Taken
      description: Update the information of an existing recipe.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /recipe:
    post:
      summary: Create New Recipe
      operationId: post-recipe
      responses:
        '200':
          description: Recipe Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
              examples:
                New Recipe Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
components:
  schemas:
    Recipe:
      title: User
      type: object
      description: ''
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
